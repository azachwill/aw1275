---
title: "Shiny for Python 0.4.0"
date: '2023-06-30'
slug: shiny-for-python-0-4-0
tags:
  - shiny
  - python
authors:
  - Winston Chang
description: Description here.
alttext: Add alt text for header image.
blogcategories:
  - Open Source
  - Products and Technology
events: blog
---

Since we announced that [Shiny for Python is generally available](https://shiny.posit.co/blog/shiny-python-general-availability.html), we have been continuously expanding its features and capabilities. Below, we summarize the latest additions that make Shiny for Python an even more powerful tool for interactive web applications.

## Introducing data grid / data table

We've added a new, fast-scrolling data table output.

<script src="https://fast.wistia.com/embed/medias/t7pdcrtcmg.jsonp" async></script><script src="https://fast.wistia.com/assets/external/E-v1.js" async></script><div class="wistia_responsive_padding" style="padding:49.58% 0 0 0;position:relative;"><div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"><div class="wistia_embed wistia_async_t7pdcrtcmg videoFoam=true" style="height:100%;position:relative;width:100%"><div class="wistia_swatch" style="height:100%;left:0;opacity:0;overflow:hidden;position:absolute;top:0;transition:opacity 200ms;width:100%;"><img src="https://fast.wistia.com/embed/medias/t7pdcrtcmg/swatch" style="filter:blur(5px);height:100%;object-fit:contain;width:100%;" alt="" aria-hidden="true" onload="this.parentNode.style.opacity=1;" /></div></div></div></div>

It can easily handle tables with tens of thousands of rows and supports sorting by columns -- just click on the column header to sort.

In addition to the grid-style appearance, the data can be displayed with a more traditional table-like appearance.

![](data-table.png){fig-alt="Data table with more traditional appearance"}

These tables aren't just for displaying data -- they can also allow you to select rows, and use that selection as an input, as shown here:

<center><script src="https://fast.wistia.com/embed/medias/h2bulvql83.jsonp" async></script><script src="https://fast.wistia.com/assets/external/E-v1.js" async></script><div class="wistia_responsive_padding" style="padding:67.71% 0 0 0;position:relative;"><div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"><div class="wistia_embed wistia_async_h2bulvql83 videoFoam=true" style="height:100%;position:relative;width:100%"><div class="wistia_swatch" style="height:100%;left:0;opacity:0;overflow:hidden;position:absolute;top:0;transition:opacity 200ms;width:100%;"><img src="https://fast.wistia.com/embed/medias/h2bulvql83/swatch" style="filter:blur(5px);height:100%;object-fit:contain;width:100%;" alt="" aria-hidden="true" onload="this.parentNode.style.opacity=1;" /></div></div></div></div></center>

To use the new tables, put this in your application's UI:

```python
  ui.output_data_frame("mygrid")
```

And in your server function, use `@render.data_frame` and give it a function that returns a `render.DataGrid()`; in turn, that function as a Pandas data frame.

```python
  @output
  @render.data_frame
  def mygrid():
    return render.DataGrid(my_df)
```

To get the more traditional table-like styling, return a `render.DataTable()` instead.

- [Try it out with Shinylive](https://shinylive.io/py/examples/#data-frame-grid)
- [API documentation](https://shiny.posit.co/py/api/render.data_frame.html)



## Better-looking sidebars

In addition to the new tables, we've also improved the look of the basic sidebar. Here's what they used to look like:

![](sidebar-old.png){fig-alt="App with old sidebar"}


Previously, the sidebar was only as tall as the content in the sidebar, but now they span the full height of the application. Here's what they look like now:

![](sidebar-new.png){fig-alt="App with new sidebar"}

You won't have to change any code to get the new look -- your existing code will just work!

[Check out a live example here.](https://shinylive.io/py/examples/#cpu-info)

## Join us at posit::conf(2023)

Join us at [posit::conf(2023)](https://posit.co/conference/) and learn to build Shiny apps in Python in our [hands-on workshop](https://reg.conf.posit.co/flow/posit/positconf23/attendee-portal/page/sessioncatalog?search=1037) led by Joe Cheng, CTO of Posit. Limited spots are available, so register now!